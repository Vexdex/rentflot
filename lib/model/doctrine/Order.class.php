<?php

/**
 * Order
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Rentflot
 * @subpackage model
 * @author     Infosoft
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
 
define('ORDER_STATUS_OK', 0);
define('ORDER_INCOME_DEBT', 1);
define('ORDER_OUTCOME_DEBT', 2);
 
class Order extends BaseOrder
{

  public function getOrderItemsStatusesInfo()
  {
    $info = array();
    $output = array();
    foreach ($this->getOrderItems() as $order_item)
    {
      /* @var OrderItem $order_item */
      $info[$order_item->getStatusId()][] = $order_item->getStatus()->__toString().' - '.$order_item->getItem()->getInternalName();
    }
    ksort($info);
    foreach ($info as $data)
    {
      $output[] = implode("\n", $data);
    }
    return implode("\n", $output);
  }

  public function getStatus()
  {
    return Doctrine::getTable('OrderItemStatus')->findOneById($this->getStatusId());
  }

  public function getStatusId()
  {
    $status_id = 1;
    $status_3_count = 0;
    foreach ($this->getOrderItems() as $order_item)
    {
      if ($order_item->getStatusId() && $order_item->getStatusId() != 1)
      {
        $status_id = 2;
      }
      if ($order_item->getStatusId() == 3)
      {
        $status_3_count++;
      }
    }
    if ($status_3_count > 0 && $status_3_count == $this->getOrderItems()->count())
    {
      $status_id = 3;
    }
    return $status_id;
  }

  public function getDebtStatus()
  {
    $amount_info = $this->getAmountInfo();
    
    // Еще получим ORDER_INCOME_DEBT
    $income_debt = round($amount_info['amount_uah'] - $amount_info['amount_payed_uah'] - $amount_info['amount_payed_bank_uah'], 2);
    // Еще отдать ORDER_OUTCOME_DEBT
    $outcome_debt = round($amount_info['amount_costs_uah'] - $amount_info['amount_costs_payed_uah'], 2);
    
    if ($income_debt == 0 && $outcome_debt > 0)
    {
      return ORDER_OUTCOME_DEBT;
    }
    if ($income_debt > 0)
    {
      return ORDER_INCOME_DEBT;
    }
    return ORDER_STATUS_OK;
  }
    
  public function getAmountInfo()
  {
    $amount_data = array(
                    'amount_left_uah' => 0,
                    'amount_costs_left_uah' => 0,
                    'profit_uah' => 0,
                    'amount_uah' => 0,
                    'amount_payed_uah' => 0,
                    'amount_payed_bank_uah' => 0,
                    'amount_total_payed_uah' => 0,
                    'amount_costs_uah' => 0,
                    'amount_costs_payed_uah' => 0);
    
    foreach ($this->getOrderItems() as $order_item)
    {      
      $amount_data['amount_uah'] += $order_item->getPriceUah() * $order_item->getCount();
      $amount_data['amount_payed_uah'] += $order_item->getAmountPayedUah();
      $amount_data['amount_payed_bank_uah'] += $order_item->getAmountPayedBankUah();
      $amount_data['amount_total_payed_uah'] += $order_item->getAmountPayedUah() + $order_item->getAmountPayedBankUah();
      $amount_data['amount_costs_uah'] +=  $order_item->getAmountCostsUah();
      $amount_data['amount_costs_payed_uah'] += $order_item->getAmountCostsPayedUah();
    }

    $amount_data['amount_left_uah'] = $amount_data['amount_uah'] - $amount_data['amount_payed_uah'] - $amount_data['amount_payed_bank_uah'];
    $amount_data['amount_costs_left_uah'] = $amount_data['amount_costs_uah'] - $amount_data['amount_costs_payed_uah'];
    $amount_data['profit_uah'] = $amount_data['amount_uah'] - $amount_data['amount_costs_uah'];

    foreach ($amount_data as $name => $data)
    {
      $amount_data[$name] = round($data, 2);
    }

    return $amount_data;
  }
    
  public function getClientName()
  {
    return $this->getClient();
  }
  
  public function getOrderTypeName()
  {
    return $this->getOrderType();
  }

  public function getTime()
  {
    return format_date($this->getTimeFrom(), 'HH:mm').'–'.format_date($this->getTimeTo(), 'HH:mm');
  }

  /*
  public function getAmountFullUah()
  {
    $order_items = $this->getOrderItems();
    $amount_full_uah = 0;
    foreach ($order_items as $order_item)
    {
      $amount_full_uah += $order_item->getAmountUah();
    }
    return $amount_full_uah;
  }
  */

  public function getFirstMotorShip()
  {
    $order_items = $this->getOrderItems();

    foreach ($order_items as $order_item)
    {    
      $item = $order_item->getItem();
      $order_item_categories = $item->getCategories();

      foreach ($order_item_categories as $order_item_category)
      {
        if (in_array($order_item_category->getId(), sfConfig::get('app_category_motor_ships')))
        {
          return $item;
        }
      }
    }

    return false;
  }
}